#include "definitions.hpp"


#pragma GCC diagnostic push
#pragma clang diagnostic ignored "-Wextra-semi"
std::vector<function_definition_t> gl_functions = [](){
    // The lambda function is used over a initializer list to speed up compile time
    std::vector<function_definition_t> result;
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glCullFace");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glFrontFace");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum mode"}},"glHint");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat width"}},"glLineWidth");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat size"}},"glPointSize");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum mode"}},"glPolygonMode");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glScissor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLfloat param"}},"glTexParameterf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"const GLfloat * params"}},"glTexParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint param"}},"glTexParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"const GLint * params"}},"glTexParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint internalformat"},{"GLsizei width"},{"GLint border"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTexImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLint border"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTexImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum buf"}},"glDrawBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbitfield mask"}},"glClear");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat red"},{"GLfloat green"},{"GLfloat blue"},{"GLfloat alpha"}},"glClearColor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint s"}},"glClearStencil");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble depth"}},"glClearDepth");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint mask"}},"glStencilMask");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLboolean red"},{"GLboolean green"},{"GLboolean blue"},{"GLboolean alpha"}},"glColorMask");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLboolean flag"}},"glDepthMask");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum cap"}},"glDisable");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum cap"}},"glEnable");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glFinish");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glFlush");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum sfactor"},{"GLenum dfactor"}},"glBlendFunc");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum opcode"}},"glLogicOp");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum func"},{"GLint ref"},{"GLuint mask"}},"glStencilFunc");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum fail"},{"GLenum zfail"},{"GLenum zpass"}},"glStencilOp");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum func"}},"glDepthFunc");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLfloat param"}},"glPixelStoref");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint param"}},"glPixelStorei");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum src"}},"glReadBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLenum type"},{"void * pixels"}},"glReadPixels");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLboolean * data"}},"glGetBooleanv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLdouble * data"}},"glGetDoublev");
    result.emplace_back("GLenum",std::vector<parameter_definition_t>{},"glGetError");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLfloat * data"}},"glGetFloatv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint * data"}},"glGetIntegerv");
    result.emplace_back("const GLubyte *",std::vector<parameter_definition_t>{{"GLenum name"}},"glGetString");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum format"},{"GLenum type"},{"void * pixels"}},"glGetTexImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLfloat * params"}},"glGetTexParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetTexParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum pname"},{"GLfloat * params"}},"glGetTexLevelParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum pname"},{"GLint * params"}},"glGetTexLevelParameteriv");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLenum cap"}},"glIsEnabled");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble n"},{"GLdouble f"}},"glDepthRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glViewport");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint list"},{"GLenum mode"}},"glNewList");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glEndList");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint list"}},"glCallList");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLenum type"},{"const void * lists"}},"glCallLists");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint list"},{"GLsizei range"}},"glDeleteLists");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLsizei range"}},"glGenLists");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint base"}},"glListBase");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glBegin");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei width"},{"GLsizei height"},{"GLfloat xorig"},{"GLfloat yorig"},{"GLfloat xmove"},{"GLfloat ymove"},{"const GLubyte * bitmap"}},"glBitmap");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbyte red"},{"GLbyte green"},{"GLbyte blue"}},"glColor3b");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLbyte * v"}},"glColor3bv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble red"},{"GLdouble green"},{"GLdouble blue"}},"glColor3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glColor3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat red"},{"GLfloat green"},{"GLfloat blue"}},"glColor3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glColor3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint red"},{"GLint green"},{"GLint blue"}},"glColor3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glColor3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort red"},{"GLshort green"},{"GLshort blue"}},"glColor3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glColor3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLubyte red"},{"GLubyte green"},{"GLubyte blue"}},"glColor3ub");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLubyte * v"}},"glColor3ubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint red"},{"GLuint green"},{"GLuint blue"}},"glColor3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLuint * v"}},"glColor3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLushort red"},{"GLushort green"},{"GLushort blue"}},"glColor3us");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLushort * v"}},"glColor3usv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbyte red"},{"GLbyte green"},{"GLbyte blue"},{"GLbyte alpha"}},"glColor4b");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLbyte * v"}},"glColor4bv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble red"},{"GLdouble green"},{"GLdouble blue"},{"GLdouble alpha"}},"glColor4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glColor4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat red"},{"GLfloat green"},{"GLfloat blue"},{"GLfloat alpha"}},"glColor4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glColor4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint red"},{"GLint green"},{"GLint blue"},{"GLint alpha"}},"glColor4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glColor4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort red"},{"GLshort green"},{"GLshort blue"},{"GLshort alpha"}},"glColor4s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glColor4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLubyte red"},{"GLubyte green"},{"GLubyte blue"},{"GLubyte alpha"}},"glColor4ub");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLubyte * v"}},"glColor4ubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint red"},{"GLuint green"},{"GLuint blue"},{"GLuint alpha"}},"glColor4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLuint * v"}},"glColor4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLushort red"},{"GLushort green"},{"GLushort blue"},{"GLushort alpha"}},"glColor4us");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLushort * v"}},"glColor4usv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLboolean flag"}},"glEdgeFlag");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLboolean * flag"}},"glEdgeFlagv");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glEnd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble c"}},"glIndexd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * c"}},"glIndexdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat c"}},"glIndexf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * c"}},"glIndexfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint c"}},"glIndexi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * c"}},"glIndexiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort c"}},"glIndexs");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * c"}},"glIndexsv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbyte nx"},{"GLbyte ny"},{"GLbyte nz"}},"glNormal3b");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLbyte * v"}},"glNormal3bv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble nx"},{"GLdouble ny"},{"GLdouble nz"}},"glNormal3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glNormal3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat nx"},{"GLfloat ny"},{"GLfloat nz"}},"glNormal3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glNormal3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint nx"},{"GLint ny"},{"GLint nz"}},"glNormal3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glNormal3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort nx"},{"GLshort ny"},{"GLshort nz"}},"glNormal3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glNormal3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"}},"glRasterPos2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glRasterPos2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"}},"glRasterPos2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glRasterPos2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"}},"glRasterPos2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glRasterPos2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"}},"glRasterPos2s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glRasterPos2sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glRasterPos3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glRasterPos3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glRasterPos3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glRasterPos3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLint z"}},"glRasterPos3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glRasterPos3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"},{"GLshort z"}},"glRasterPos3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glRasterPos3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"},{"GLdouble w"}},"glRasterPos4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glRasterPos4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"},{"GLfloat w"}},"glRasterPos4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glRasterPos4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLint z"},{"GLint w"}},"glRasterPos4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glRasterPos4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"},{"GLshort z"},{"GLshort w"}},"glRasterPos4s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glRasterPos4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x1"},{"GLdouble y1"},{"GLdouble x2"},{"GLdouble y2"}},"glRectd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v1"},{"const GLdouble * v2"}},"glRectdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x1"},{"GLfloat y1"},{"GLfloat x2"},{"GLfloat y2"}},"glRectf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v1"},{"const GLfloat * v2"}},"glRectfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x1"},{"GLint y1"},{"GLint x2"},{"GLint y2"}},"glRecti");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v1"},{"const GLint * v2"}},"glRectiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x1"},{"GLshort y1"},{"GLshort x2"},{"GLshort y2"}},"glRects");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v1"},{"const GLshort * v2"}},"glRectsv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble s"}},"glTexCoord1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glTexCoord1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat s"}},"glTexCoord1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glTexCoord1fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint s"}},"glTexCoord1i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glTexCoord1iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort s"}},"glTexCoord1s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glTexCoord1sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble s"},{"GLdouble t"}},"glTexCoord2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glTexCoord2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat s"},{"GLfloat t"}},"glTexCoord2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glTexCoord2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint s"},{"GLint t"}},"glTexCoord2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glTexCoord2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort s"},{"GLshort t"}},"glTexCoord2s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glTexCoord2sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble s"},{"GLdouble t"},{"GLdouble r"}},"glTexCoord3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glTexCoord3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat s"},{"GLfloat t"},{"GLfloat r"}},"glTexCoord3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glTexCoord3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint s"},{"GLint t"},{"GLint r"}},"glTexCoord3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glTexCoord3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort s"},{"GLshort t"},{"GLshort r"}},"glTexCoord3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glTexCoord3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble s"},{"GLdouble t"},{"GLdouble r"},{"GLdouble q"}},"glTexCoord4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glTexCoord4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat s"},{"GLfloat t"},{"GLfloat r"},{"GLfloat q"}},"glTexCoord4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glTexCoord4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint s"},{"GLint t"},{"GLint r"},{"GLint q"}},"glTexCoord4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glTexCoord4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort s"},{"GLshort t"},{"GLshort r"},{"GLshort q"}},"glTexCoord4s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glTexCoord4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"}},"glVertex2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glVertex2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"}},"glVertex2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glVertex2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"}},"glVertex2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glVertex2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"}},"glVertex2s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glVertex2sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glVertex3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glVertex3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glVertex3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glVertex3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLint z"}},"glVertex3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glVertex3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"},{"GLshort z"}},"glVertex3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glVertex3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"},{"GLdouble w"}},"glVertex4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glVertex4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"},{"GLfloat w"}},"glVertex4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glVertex4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLint z"},{"GLint w"}},"glVertex4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glVertex4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"},{"GLshort z"},{"GLshort w"}},"glVertex4s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glVertex4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum plane"},{"const GLdouble * equation"}},"glClipPlane");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum mode"}},"glColorMaterial");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLfloat param"}},"glFogf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLfloat * params"}},"glFogfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint param"}},"glFogi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLint * params"}},"glFogiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum light"},{"GLenum pname"},{"GLfloat param"}},"glLightf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum light"},{"GLenum pname"},{"const GLfloat * params"}},"glLightfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum light"},{"GLenum pname"},{"GLint param"}},"glLighti");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum light"},{"GLenum pname"},{"const GLint * params"}},"glLightiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLfloat param"}},"glLightModelf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLfloat * params"}},"glLightModelfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint param"}},"glLightModeli");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLint * params"}},"glLightModeliv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint factor"},{"GLushort pattern"}},"glLineStipple");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum pname"},{"GLfloat param"}},"glMaterialf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum pname"},{"const GLfloat * params"}},"glMaterialfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum pname"},{"GLint param"}},"glMateriali");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum pname"},{"const GLint * params"}},"glMaterialiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLubyte * mask"}},"glPolygonStipple");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glShadeModel");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLfloat param"}},"glTexEnvf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"const GLfloat * params"}},"glTexEnvfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint param"}},"glTexEnvi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"const GLint * params"}},"glTexEnviv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"GLdouble param"}},"glTexGend");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"const GLdouble * params"}},"glTexGendv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"GLfloat param"}},"glTexGenf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"const GLfloat * params"}},"glTexGenfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"GLint param"}},"glTexGeni");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"const GLint * params"}},"glTexGeniv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei size"},{"GLenum type"},{"GLfloat * buffer"}},"glFeedbackBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei size"},{"GLuint * buffer"}},"glSelectBuffer");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLenum mode"}},"glRenderMode");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glInitNames");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint name"}},"glLoadName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat token"}},"glPassThrough");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPopName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint name"}},"glPushName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat red"},{"GLfloat green"},{"GLfloat blue"},{"GLfloat alpha"}},"glClearAccum");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat c"}},"glClearIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint mask"}},"glIndexMask");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum op"},{"GLfloat value"}},"glAccum");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPopAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbitfield mask"}},"glPushAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLdouble u1"},{"GLdouble u2"},{"GLint stride"},{"GLint order"},{"const GLdouble * points"}},"glMap1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLfloat u1"},{"GLfloat u2"},{"GLint stride"},{"GLint order"},{"const GLfloat * points"}},"glMap1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLdouble u1"},{"GLdouble u2"},{"GLint ustride"},{"GLint uorder"},{"GLdouble v1"},{"GLdouble v2"},{"GLint vstride"},{"GLint vorder"},{"const GLdouble * points"}},"glMap2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLfloat u1"},{"GLfloat u2"},{"GLint ustride"},{"GLint uorder"},{"GLfloat v1"},{"GLfloat v2"},{"GLint vstride"},{"GLint vorder"},{"const GLfloat * points"}},"glMap2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint un"},{"GLdouble u1"},{"GLdouble u2"}},"glMapGrid1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint un"},{"GLfloat u1"},{"GLfloat u2"}},"glMapGrid1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint un"},{"GLdouble u1"},{"GLdouble u2"},{"GLint vn"},{"GLdouble v1"},{"GLdouble v2"}},"glMapGrid2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint un"},{"GLfloat u1"},{"GLfloat u2"},{"GLint vn"},{"GLfloat v1"},{"GLfloat v2"}},"glMapGrid2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble u"}},"glEvalCoord1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * u"}},"glEvalCoord1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat u"}},"glEvalCoord1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * u"}},"glEvalCoord1fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble u"},{"GLdouble v"}},"glEvalCoord2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * u"}},"glEvalCoord2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat u"},{"GLfloat v"}},"glEvalCoord2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * u"}},"glEvalCoord2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLint i1"},{"GLint i2"}},"glEvalMesh1");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint i"}},"glEvalPoint1");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLint i1"},{"GLint i2"},{"GLint j1"},{"GLint j2"}},"glEvalMesh2");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint i"},{"GLint j"}},"glEvalPoint2");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum func"},{"GLfloat ref"}},"glAlphaFunc");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat xfactor"},{"GLfloat yfactor"}},"glPixelZoom");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLfloat param"}},"glPixelTransferf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint param"}},"glPixelTransferi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLsizei mapsize"},{"const GLfloat * values"}},"glPixelMapfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLsizei mapsize"},{"const GLuint * values"}},"glPixelMapuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLsizei mapsize"},{"const GLushort * values"}},"glPixelMapusv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"},{"GLenum type"}},"glCopyPixels");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glDrawPixels");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum plane"},{"GLdouble * equation"}},"glGetClipPlane");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum light"},{"GLenum pname"},{"GLfloat * params"}},"glGetLightfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum light"},{"GLenum pname"},{"GLint * params"}},"glGetLightiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum query"},{"GLdouble * v"}},"glGetMapdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum query"},{"GLfloat * v"}},"glGetMapfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum query"},{"GLint * v"}},"glGetMapiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum pname"},{"GLfloat * params"}},"glGetMaterialfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum pname"},{"GLint * params"}},"glGetMaterialiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLfloat * values"}},"glGetPixelMapfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLuint * values"}},"glGetPixelMapuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLushort * values"}},"glGetPixelMapusv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLubyte * mask"}},"glGetPolygonStipple");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLfloat * params"}},"glGetTexEnvfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetTexEnviv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"GLdouble * params"}},"glGetTexGendv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"GLfloat * params"}},"glGetTexGenfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum coord"},{"GLenum pname"},{"GLint * params"}},"glGetTexGeniv");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint list"}},"glIsList");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble left"},{"GLdouble right"},{"GLdouble bottom"},{"GLdouble top"},{"GLdouble zNear"},{"GLdouble zFar"}},"glFrustum");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glLoadIdentity");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * m"}},"glLoadMatrixf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * m"}},"glLoadMatrixd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glMatrixMode");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * m"}},"glMultMatrixf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * m"}},"glMultMatrixd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble left"},{"GLdouble right"},{"GLdouble bottom"},{"GLdouble top"},{"GLdouble zNear"},{"GLdouble zFar"}},"glOrtho");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPopMatrix");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPushMatrix");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble angle"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glRotated");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat angle"},{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glRotatef");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glScaled");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glScalef");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glTranslated");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glTranslatef");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLint first"},{"GLsizei count"}},"glDrawArrays");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLsizei count"},{"GLenum type"},{"const void * indices"}},"glDrawElements");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"void ** params"}},"glGetPointerv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat factor"},{"GLfloat units"}},"glPolygonOffset");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum internalformat"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLint border"}},"glCopyTexImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum internalformat"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"},{"GLint border"}},"glCopyTexImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint x"},{"GLint y"},{"GLsizei width"}},"glCopyTexSubImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glCopyTexSubImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLsizei width"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTexSubImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTexSubImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint texture"}},"glBindTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * textures"}},"glDeleteTextures");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * textures"}},"glGenTextures");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint texture"}},"glIsTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint i"}},"glArrayElement");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint size"},{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glColorPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum array"}},"glDisableClientState");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei stride"},{"const void * pointer"}},"glEdgeFlagPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum array"}},"glEnableClientState");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glIndexPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum format"},{"GLsizei stride"},{"const void * pointer"}},"glInterleavedArrays");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glNormalPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint size"},{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glTexCoordPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint size"},{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glVertexPointer");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * textures"},{"GLboolean * residences"}},"glAreTexturesResident");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * textures"},{"const GLfloat * priorities"}},"glPrioritizeTextures");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLubyte c"}},"glIndexub");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLubyte * c"}},"glIndexubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPopClientAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbitfield mask"}},"glPushClientAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLuint start"},{"GLuint end"},{"GLsizei count"},{"GLenum type"},{"const void * indices"}},"glDrawRangeElements");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLint border"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTexImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTexSubImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glCopyTexSubImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"}},"glActiveTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat value"},{"GLboolean invert"}},"glSampleCoverage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLint border"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTexImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLint border"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTexImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum internalformat"},{"GLsizei width"},{"GLint border"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTexImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLenum format"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTexSubImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTexSubImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLint xoffset"},{"GLsizei width"},{"GLenum format"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTexSubImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"void * img"}},"glGetCompressedTexImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"}},"glClientActiveTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLdouble s"}},"glMultiTexCoord1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLdouble * v"}},"glMultiTexCoord1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLfloat s"}},"glMultiTexCoord1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLfloat * v"}},"glMultiTexCoord1fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint s"}},"glMultiTexCoord1i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLint * v"}},"glMultiTexCoord1iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLshort s"}},"glMultiTexCoord1s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLshort * v"}},"glMultiTexCoord1sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLdouble s"},{"GLdouble t"}},"glMultiTexCoord2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLdouble * v"}},"glMultiTexCoord2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLfloat s"},{"GLfloat t"}},"glMultiTexCoord2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLfloat * v"}},"glMultiTexCoord2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint s"},{"GLint t"}},"glMultiTexCoord2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLint * v"}},"glMultiTexCoord2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLshort s"},{"GLshort t"}},"glMultiTexCoord2s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLshort * v"}},"glMultiTexCoord2sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLdouble s"},{"GLdouble t"},{"GLdouble r"}},"glMultiTexCoord3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLdouble * v"}},"glMultiTexCoord3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLfloat s"},{"GLfloat t"},{"GLfloat r"}},"glMultiTexCoord3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLfloat * v"}},"glMultiTexCoord3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint s"},{"GLint t"},{"GLint r"}},"glMultiTexCoord3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLint * v"}},"glMultiTexCoord3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLshort s"},{"GLshort t"},{"GLshort r"}},"glMultiTexCoord3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLshort * v"}},"glMultiTexCoord3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLdouble s"},{"GLdouble t"},{"GLdouble r"},{"GLdouble q"}},"glMultiTexCoord4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLdouble * v"}},"glMultiTexCoord4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLfloat s"},{"GLfloat t"},{"GLfloat r"},{"GLfloat q"}},"glMultiTexCoord4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLfloat * v"}},"glMultiTexCoord4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint s"},{"GLint t"},{"GLint r"},{"GLint q"}},"glMultiTexCoord4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLint * v"}},"glMultiTexCoord4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLshort s"},{"GLshort t"},{"GLshort r"},{"GLshort q"}},"glMultiTexCoord4s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"const GLshort * v"}},"glMultiTexCoord4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * m"}},"glLoadTransposeMatrixf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * m"}},"glLoadTransposeMatrixd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * m"}},"glMultTransposeMatrixf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * m"}},"glMultTransposeMatrixd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum sfactorRGB"},{"GLenum dfactorRGB"},{"GLenum sfactorAlpha"},{"GLenum dfactorAlpha"}},"glBlendFuncSeparate");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"const GLint * first"},{"const GLsizei * count"},{"GLsizei drawcount"}},"glMultiDrawArrays");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"const GLsizei * count"},{"GLenum type"},{"const void * const* indices"},{"GLsizei drawcount"}},"glMultiDrawElements");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLfloat param"}},"glPointParameterf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLfloat * params"}},"glPointParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint param"}},"glPointParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLint * params"}},"glPointParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat coord"}},"glFogCoordf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * coord"}},"glFogCoordfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble coord"}},"glFogCoordd");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * coord"}},"glFogCoorddv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glFogCoordPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbyte red"},{"GLbyte green"},{"GLbyte blue"}},"glSecondaryColor3b");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLbyte * v"}},"glSecondaryColor3bv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble red"},{"GLdouble green"},{"GLdouble blue"}},"glSecondaryColor3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glSecondaryColor3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat red"},{"GLfloat green"},{"GLfloat blue"}},"glSecondaryColor3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glSecondaryColor3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint red"},{"GLint green"},{"GLint blue"}},"glSecondaryColor3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glSecondaryColor3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort red"},{"GLshort green"},{"GLshort blue"}},"glSecondaryColor3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glSecondaryColor3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLubyte red"},{"GLubyte green"},{"GLubyte blue"}},"glSecondaryColor3ub");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLubyte * v"}},"glSecondaryColor3ubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint red"},{"GLuint green"},{"GLuint blue"}},"glSecondaryColor3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLuint * v"}},"glSecondaryColor3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLushort red"},{"GLushort green"},{"GLushort blue"}},"glSecondaryColor3us");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLushort * v"}},"glSecondaryColor3usv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint size"},{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glSecondaryColorPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"}},"glWindowPos2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glWindowPos2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"}},"glWindowPos2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glWindowPos2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"}},"glWindowPos2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glWindowPos2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"}},"glWindowPos2s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glWindowPos2sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glWindowPos3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLdouble * v"}},"glWindowPos3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glWindowPos3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLfloat * v"}},"glWindowPos3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLint z"}},"glWindowPos3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLint * v"}},"glWindowPos3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLshort x"},{"GLshort y"},{"GLshort z"}},"glWindowPos3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const GLshort * v"}},"glWindowPos3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat red"},{"GLfloat green"},{"GLfloat blue"},{"GLfloat alpha"}},"glBlendColor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glBlendEquation");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * ids"}},"glGenQueries");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * ids"}},"glDeleteQueries");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint id"}},"glIsQuery");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint id"}},"glBeginQuery");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"}},"glEndQuery");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetQueryiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLenum pname"},{"GLint * params"}},"glGetQueryObjectiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLenum pname"},{"GLuint * params"}},"glGetQueryObjectuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint buffer"}},"glBindBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * buffers"}},"glDeleteBuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * buffers"}},"glGenBuffers");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint buffer"}},"glIsBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizeiptr size"},{"const void * data"},{"GLenum usage"}},"glBufferData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLintptr offset"},{"GLsizeiptr size"},{"const void * data"}},"glBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLintptr offset"},{"GLsizeiptr size"},{"void * data"}},"glGetBufferSubData");
    result.emplace_back("void *",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum access"}},"glMapBuffer");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLenum target"}},"glUnmapBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetBufferParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"void ** params"}},"glGetBufferPointerv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum modeRGB"},{"GLenum modeAlpha"}},"glBlendEquationSeparate");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLenum * bufs"}},"glDrawBuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum sfail"},{"GLenum dpfail"},{"GLenum dppass"}},"glStencilOpSeparate");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLenum func"},{"GLint ref"},{"GLuint mask"}},"glStencilFuncSeparate");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum face"},{"GLuint mask"}},"glStencilMaskSeparate");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint shader"}},"glAttachShader");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint index"},{"const GLchar * name"}},"glBindAttribLocation");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"}},"glCompileShader");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{},"glCreateProgram");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLenum type"}},"glCreateShader");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"}},"glDeleteProgram");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"}},"glDeleteShader");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint shader"}},"glDetachShader");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"}},"glDisableVertexAttribArray");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"}},"glEnableVertexAttribArray");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint index"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLint * size"},{"GLenum * type"},{"GLchar * name"}},"glGetActiveAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint index"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLint * size"},{"GLenum * type"},{"GLchar * name"}},"glGetActiveUniform");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLsizei maxCount"},{"GLsizei * count"},{"GLuint * shaders"}},"glGetAttachedShaders");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"const GLchar * name"}},"glGetAttribLocation");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum pname"},{"GLint * params"}},"glGetProgramiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * infoLog"}},"glGetProgramInfoLog");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"},{"GLenum pname"},{"GLint * params"}},"glGetShaderiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * infoLog"}},"glGetShaderInfoLog");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * source"}},"glGetShaderSource");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"const GLchar * name"}},"glGetUniformLocation");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLfloat * params"}},"glGetUniformfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLint * params"}},"glGetUniformiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"GLdouble * params"}},"glGetVertexAttribdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"GLfloat * params"}},"glGetVertexAttribfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"GLint * params"}},"glGetVertexAttribiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"void ** pointer"}},"glGetVertexAttribPointerv");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint program"}},"glIsProgram");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint shader"}},"glIsShader");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"}},"glLinkProgram");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"},{"GLsizei count"},{"const GLchar * const* string"},{"const GLint * length"}},"glShaderSource");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"}},"glUseProgram");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLfloat v0"}},"glUniform1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLfloat v0"},{"GLfloat v1"}},"glUniform2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLfloat v0"},{"GLfloat v1"},{"GLfloat v2"}},"glUniform3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLfloat v0"},{"GLfloat v1"},{"GLfloat v2"},{"GLfloat v3"}},"glUniform4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLint v0"}},"glUniform1i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLint v0"},{"GLint v1"}},"glUniform2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLint v0"},{"GLint v1"},{"GLint v2"}},"glUniform3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLint v0"},{"GLint v1"},{"GLint v2"},{"GLint v3"}},"glUniform4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glUniform1fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glUniform2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glUniform3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glUniform4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glUniform1iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glUniform2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glUniform3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glUniform4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"}},"glValidateProgram");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"}},"glVertexAttrib1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttrib1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLfloat x"}},"glVertexAttrib1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLfloat * v"}},"glVertexAttrib1fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLshort x"}},"glVertexAttrib1s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLshort * v"}},"glVertexAttrib1sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"},{"GLdouble y"}},"glVertexAttrib2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttrib2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLfloat x"},{"GLfloat y"}},"glVertexAttrib2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLfloat * v"}},"glVertexAttrib2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLshort x"},{"GLshort y"}},"glVertexAttrib2s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLshort * v"}},"glVertexAttrib2sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glVertexAttrib3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttrib3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLfloat x"},{"GLfloat y"},{"GLfloat z"}},"glVertexAttrib3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLfloat * v"}},"glVertexAttrib3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLshort x"},{"GLshort y"},{"GLshort z"}},"glVertexAttrib3s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLshort * v"}},"glVertexAttrib3sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLbyte * v"}},"glVertexAttrib4Nbv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glVertexAttrib4Niv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLshort * v"}},"glVertexAttrib4Nsv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLubyte x"},{"GLubyte y"},{"GLubyte z"},{"GLubyte w"}},"glVertexAttrib4Nub");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLubyte * v"}},"glVertexAttrib4Nubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLuint * v"}},"glVertexAttrib4Nuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLushort * v"}},"glVertexAttrib4Nusv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLbyte * v"}},"glVertexAttrib4bv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"},{"GLdouble w"}},"glVertexAttrib4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttrib4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLfloat x"},{"GLfloat y"},{"GLfloat z"},{"GLfloat w"}},"glVertexAttrib4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLfloat * v"}},"glVertexAttrib4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glVertexAttrib4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLshort x"},{"GLshort y"},{"GLshort z"},{"GLshort w"}},"glVertexAttrib4s");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLshort * v"}},"glVertexAttrib4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLubyte * v"}},"glVertexAttrib4ubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLuint * v"}},"glVertexAttrib4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLushort * v"}},"glVertexAttrib4usv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint size"},{"GLenum type"},{"GLboolean normalized"},{"GLsizei stride"},{"const void * pointer"}},"glVertexAttribPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix2x3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix3x2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix2x4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix4x2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix3x4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glUniformMatrix4x3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLboolean r"},{"GLboolean g"},{"GLboolean b"},{"GLboolean a"}},"glColorMaski");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLboolean * data"}},"glGetBooleani_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLint * data"}},"glGetIntegeri_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"}},"glEnablei");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"}},"glDisablei");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"}},"glIsEnabledi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum primitiveMode"}},"glBeginTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glEndTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr size"}},"glBindBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLuint buffer"}},"glBindBufferBase");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLsizei count"},{"const GLchar * const* varyings"},{"GLenum bufferMode"}},"glTransformFeedbackVaryings");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint index"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLsizei * size"},{"GLenum * type"},{"GLchar * name"}},"glGetTransformFeedbackVarying");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum clamp"}},"glClampColor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLenum mode"}},"glBeginConditionalRender");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glEndConditionalRender");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint size"},{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glVertexAttribIPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"GLint * params"}},"glGetVertexAttribIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"GLuint * params"}},"glGetVertexAttribIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint x"}},"glVertexAttribI1i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint x"},{"GLint y"}},"glVertexAttribI2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint x"},{"GLint y"},{"GLint z"}},"glVertexAttribI3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint x"},{"GLint y"},{"GLint z"},{"GLint w"}},"glVertexAttribI4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLuint x"}},"glVertexAttribI1ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLuint x"},{"GLuint y"}},"glVertexAttribI2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLuint x"},{"GLuint y"},{"GLuint z"}},"glVertexAttribI3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLuint x"},{"GLuint y"},{"GLuint z"},{"GLuint w"}},"glVertexAttribI4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glVertexAttribI1iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glVertexAttribI2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glVertexAttribI3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glVertexAttribI4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLuint * v"}},"glVertexAttribI1uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLuint * v"}},"glVertexAttribI2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLuint * v"}},"glVertexAttribI3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLuint * v"}},"glVertexAttribI4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLbyte * v"}},"glVertexAttribI4bv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLshort * v"}},"glVertexAttribI4sv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLubyte * v"}},"glVertexAttribI4ubv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLushort * v"}},"glVertexAttribI4usv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLuint * params"}},"glGetUniformuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint color"},{"const GLchar * name"}},"glBindFragDataLocation");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"const GLchar * name"}},"glGetFragDataLocation");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLuint v0"}},"glUniform1ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLuint v0"},{"GLuint v1"}},"glUniform2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLuint v0"},{"GLuint v1"},{"GLuint v2"}},"glUniform3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLuint v0"},{"GLuint v1"},{"GLuint v2"},{"GLuint v3"}},"glUniform4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glUniform1uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glUniform2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glUniform3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glUniform4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"const GLint * params"}},"glTexParameterIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"const GLuint * params"}},"glTexParameterIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetTexParameterIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLuint * params"}},"glGetTexParameterIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum buffer"},{"GLint drawbuffer"},{"const GLint * value"}},"glClearBufferiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum buffer"},{"GLint drawbuffer"},{"const GLuint * value"}},"glClearBufferuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum buffer"},{"GLint drawbuffer"},{"const GLfloat * value"}},"glClearBufferfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum buffer"},{"GLint drawbuffer"},{"GLfloat depth"},{"GLint stencil"}},"glClearBufferfi");
    result.emplace_back("const GLubyte *",std::vector<parameter_definition_t>{{"GLenum name"},{"GLuint index"}},"glGetStringi");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint renderbuffer"}},"glIsRenderbuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint renderbuffer"}},"glBindRenderbuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * renderbuffers"}},"glDeleteRenderbuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * renderbuffers"}},"glGenRenderbuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"}},"glRenderbufferStorage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetRenderbufferParameteriv");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint framebuffer"}},"glIsFramebuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint framebuffer"}},"glBindFramebuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * framebuffers"}},"glDeleteFramebuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * framebuffers"}},"glGenFramebuffers");
    result.emplace_back("GLenum",std::vector<parameter_definition_t>{{"GLenum target"}},"glCheckFramebufferStatus");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLenum textarget"},{"GLuint texture"},{"GLint level"}},"glFramebufferTexture1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLenum textarget"},{"GLuint texture"},{"GLint level"}},"glFramebufferTexture2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLenum textarget"},{"GLuint texture"},{"GLint level"},{"GLint zoffset"}},"glFramebufferTexture3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLenum renderbuffertarget"},{"GLuint renderbuffer"}},"glFramebufferRenderbuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLenum pname"},{"GLint * params"}},"glGetFramebufferAttachmentParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"}},"glGenerateMipmap");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint srcX0"},{"GLint srcY0"},{"GLint srcX1"},{"GLint srcY1"},{"GLint dstX0"},{"GLint dstY0"},{"GLint dstX1"},{"GLint dstY1"},{"GLbitfield mask"},{"GLenum filter"}},"glBlitFramebuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"}},"glRenderbufferStorageMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLuint texture"},{"GLint level"},{"GLint layer"}},"glFramebufferTextureLayer");
    result.emplace_back("void *",std::vector<parameter_definition_t>{{"GLenum target"},{"GLintptr offset"},{"GLsizeiptr length"},{"GLbitfield access"}},"glMapBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLintptr offset"},{"GLsizeiptr length"}},"glFlushMappedBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint array"}},"glBindVertexArray");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * arrays"}},"glDeleteVertexArrays");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * arrays"}},"glGenVertexArrays");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint array"}},"glIsVertexArray");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLint first"},{"GLsizei count"},{"GLsizei instancecount"}},"glDrawArraysInstanced");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLsizei count"},{"GLenum type"},{"const void * indices"},{"GLsizei instancecount"}},"glDrawElementsInstanced");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLuint buffer"}},"glTexBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"}},"glPrimitiveRestartIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum readTarget"},{"GLenum writeTarget"},{"GLintptr readOffset"},{"GLintptr writeOffset"},{"GLsizeiptr size"}},"glCopyBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLsizei uniformCount"},{"const GLchar * const* uniformNames"},{"GLuint * uniformIndices"}},"glGetUniformIndices");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLsizei uniformCount"},{"const GLuint * uniformIndices"},{"GLenum pname"},{"GLint * params"}},"glGetActiveUniformsiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint uniformIndex"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * uniformName"}},"glGetActiveUniformName");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLuint program"},{"const GLchar * uniformBlockName"}},"glGetUniformBlockIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint uniformBlockIndex"},{"GLenum pname"},{"GLint * params"}},"glGetActiveUniformBlockiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint uniformBlockIndex"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * uniformBlockName"}},"glGetActiveUniformBlockName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint uniformBlockIndex"},{"GLuint uniformBlockBinding"}},"glUniformBlockBinding");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLsizei count"},{"GLenum type"},{"const void * indices"},{"GLint basevertex"}},"glDrawElementsBaseVertex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLuint start"},{"GLuint end"},{"GLsizei count"},{"GLenum type"},{"const void * indices"},{"GLint basevertex"}},"glDrawRangeElementsBaseVertex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLsizei count"},{"GLenum type"},{"const void * indices"},{"GLsizei instancecount"},{"GLint basevertex"}},"glDrawElementsInstancedBaseVertex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"const GLsizei * count"},{"GLenum type"},{"const void * const* indices"},{"GLsizei drawcount"},{"const GLint * basevertex"}},"glMultiDrawElementsBaseVertex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"}},"glProvokingVertex");
    result.emplace_back("GLsync",std::vector<parameter_definition_t>{{"GLenum condition"},{"GLbitfield flags"}},"glFenceSync");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLsync sync"}},"glIsSync");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsync sync"}},"glDeleteSync");
    result.emplace_back("GLenum",std::vector<parameter_definition_t>{{"GLsync sync"},{"GLbitfield flags"},{"GLuint64 timeout"}},"glClientWaitSync");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsync sync"},{"GLbitfield flags"},{"GLuint64 timeout"}},"glWaitSync");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint64 * data"}},"glGetInteger64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsync sync"},{"GLenum pname"},{"GLsizei count"},{"GLsizei * length"},{"GLint * values"}},"glGetSynciv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLint64 * data"}},"glGetInteger64i_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint64 * params"}},"glGetBufferParameteri64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum attachment"},{"GLuint texture"},{"GLint level"}},"glFramebufferTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLboolean fixedsamplelocations"}},"glTexImage2DMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLboolean fixedsamplelocations"}},"glTexImage3DMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLuint index"},{"GLfloat * val"}},"glGetMultisamplefv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint maskNumber"},{"GLbitfield mask"}},"glSampleMaski");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint colorNumber"},{"GLuint index"},{"const GLchar * name"}},"glBindFragDataLocationIndexed");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"const GLchar * name"}},"glGetFragDataIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei count"},{"GLuint * samplers"}},"glGenSamplers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei count"},{"const GLuint * samplers"}},"glDeleteSamplers");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint sampler"}},"glIsSampler");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint unit"},{"GLuint sampler"}},"glBindSampler");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"GLint param"}},"glSamplerParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"const GLint * param"}},"glSamplerParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"GLfloat param"}},"glSamplerParameterf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"const GLfloat * param"}},"glSamplerParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"const GLint * param"}},"glSamplerParameterIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"const GLuint * param"}},"glSamplerParameterIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"GLint * params"}},"glGetSamplerParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"GLint * params"}},"glGetSamplerParameterIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"GLfloat * params"}},"glGetSamplerParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint sampler"},{"GLenum pname"},{"GLuint * params"}},"glGetSamplerParameterIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLenum target"}},"glQueryCounter");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLenum pname"},{"GLint64 * params"}},"glGetQueryObjecti64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLenum pname"},{"GLuint64 * params"}},"glGetQueryObjectui64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLuint divisor"}},"glVertexAttribDivisor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"GLuint value"}},"glVertexAttribP1ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"const GLuint * value"}},"glVertexAttribP1uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"GLuint value"}},"glVertexAttribP2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"const GLuint * value"}},"glVertexAttribP2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"GLuint value"}},"glVertexAttribP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"const GLuint * value"}},"glVertexAttribP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"GLuint value"}},"glVertexAttribP4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum type"},{"GLboolean normalized"},{"const GLuint * value"}},"glVertexAttribP4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint value"}},"glVertexP2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * value"}},"glVertexP2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint value"}},"glVertexP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * value"}},"glVertexP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint value"}},"glVertexP4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * value"}},"glVertexP4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint coords"}},"glTexCoordP1ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * coords"}},"glTexCoordP1uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint coords"}},"glTexCoordP2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * coords"}},"glTexCoordP2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint coords"}},"glTexCoordP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * coords"}},"glTexCoordP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint coords"}},"glTexCoordP4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * coords"}},"glTexCoordP4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"GLuint coords"}},"glMultiTexCoordP1ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"const GLuint * coords"}},"glMultiTexCoordP1uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"GLuint coords"}},"glMultiTexCoordP2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"const GLuint * coords"}},"glMultiTexCoordP2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"GLuint coords"}},"glMultiTexCoordP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"const GLuint * coords"}},"glMultiTexCoordP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"GLuint coords"}},"glMultiTexCoordP4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum texture"},{"GLenum type"},{"const GLuint * coords"}},"glMultiTexCoordP4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint coords"}},"glNormalP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * coords"}},"glNormalP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint color"}},"glColorP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * color"}},"glColorP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint color"}},"glColorP4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * color"}},"glColorP4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"GLuint color"}},"glSecondaryColorP3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum type"},{"const GLuint * color"}},"glSecondaryColorP3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat value"}},"glMinSampleShading");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buf"},{"GLenum mode"}},"glBlendEquationi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buf"},{"GLenum modeRGB"},{"GLenum modeAlpha"}},"glBlendEquationSeparatei");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buf"},{"GLenum src"},{"GLenum dst"}},"glBlendFunci");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buf"},{"GLenum srcRGB"},{"GLenum dstRGB"},{"GLenum srcAlpha"},{"GLenum dstAlpha"}},"glBlendFuncSeparatei");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"const void * indirect"}},"glDrawArraysIndirect");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLenum type"},{"const void * indirect"}},"glDrawElementsIndirect");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLdouble x"}},"glUniform1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLdouble x"},{"GLdouble y"}},"glUniform2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glUniform3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"},{"GLdouble w"}},"glUniform4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glUniform1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glUniform2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glUniform3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glUniform4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix2x3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix2x4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix3x2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix3x4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix4x2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glUniformMatrix4x3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLdouble * params"}},"glGetUniformdv");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum shadertype"},{"const GLchar * name"}},"glGetSubroutineUniformLocation");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum shadertype"},{"const GLchar * name"}},"glGetSubroutineIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum shadertype"},{"GLuint index"},{"GLenum pname"},{"GLint * values"}},"glGetActiveSubroutineUniformiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum shadertype"},{"GLuint index"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * name"}},"glGetActiveSubroutineUniformName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum shadertype"},{"GLuint index"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * name"}},"glGetActiveSubroutineName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum shadertype"},{"GLsizei count"},{"const GLuint * indices"}},"glUniformSubroutinesuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum shadertype"},{"GLint location"},{"GLuint * params"}},"glGetUniformSubroutineuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum shadertype"},{"GLenum pname"},{"GLint * values"}},"glGetProgramStageiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"GLint value"}},"glPatchParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum pname"},{"const GLfloat * values"}},"glPatchParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint id"}},"glBindTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * ids"}},"glDeleteTransformFeedbacks");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * ids"}},"glGenTransformFeedbacks");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint id"}},"glIsTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPauseTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glResumeTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLuint id"}},"glDrawTransformFeedback");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLuint id"},{"GLuint stream"}},"glDrawTransformFeedbackStream");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLuint id"}},"glBeginQueryIndexed");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"}},"glEndQueryIndexed");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLenum pname"},{"GLint * params"}},"glGetQueryIndexediv");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glReleaseShaderCompiler");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei count"},{"const GLuint * shaders"},{"GLenum binaryFormat"},{"const void * binary"},{"GLsizei length"}},"glShaderBinary");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum shadertype"},{"GLenum precisiontype"},{"GLint * range"},{"GLint * precision"}},"glGetShaderPrecisionFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat n"},{"GLfloat f"}},"glDepthRangef");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat d"}},"glClearDepthf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLenum * binaryFormat"},{"void * binary"}},"glGetProgramBinary");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum binaryFormat"},{"const void * binary"},{"GLsizei length"}},"glProgramBinary");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum pname"},{"GLint value"}},"glProgramParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint pipeline"},{"GLbitfield stages"},{"GLuint program"}},"glUseProgramStages");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint pipeline"},{"GLuint program"}},"glActiveShaderProgram");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLenum type"},{"GLsizei count"},{"const GLchar * const* strings"}},"glCreateShaderProgramv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint pipeline"}},"glBindProgramPipeline");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"const GLuint * pipelines"}},"glDeleteProgramPipelines");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * pipelines"}},"glGenProgramPipelines");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint pipeline"}},"glIsProgramPipeline");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint pipeline"},{"GLenum pname"},{"GLint * params"}},"glGetProgramPipelineiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLint v0"}},"glProgramUniform1i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glProgramUniform1iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLfloat v0"}},"glProgramUniform1f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glProgramUniform1fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLdouble v0"}},"glProgramUniform1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glProgramUniform1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLuint v0"}},"glProgramUniform1ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glProgramUniform1uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLint v0"},{"GLint v1"}},"glProgramUniform2i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glProgramUniform2iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLfloat v0"},{"GLfloat v1"}},"glProgramUniform2f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glProgramUniform2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLdouble v0"},{"GLdouble v1"}},"glProgramUniform2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glProgramUniform2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLuint v0"},{"GLuint v1"}},"glProgramUniform2ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glProgramUniform2uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLint v0"},{"GLint v1"},{"GLint v2"}},"glProgramUniform3i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glProgramUniform3iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLfloat v0"},{"GLfloat v1"},{"GLfloat v2"}},"glProgramUniform3f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glProgramUniform3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLdouble v0"},{"GLdouble v1"},{"GLdouble v2"}},"glProgramUniform3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glProgramUniform3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLuint v0"},{"GLuint v1"},{"GLuint v2"}},"glProgramUniform3ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glProgramUniform3uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLint v0"},{"GLint v1"},{"GLint v2"},{"GLint v3"}},"glProgramUniform4i");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLint * value"}},"glProgramUniform4iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLfloat v0"},{"GLfloat v1"},{"GLfloat v2"},{"GLfloat v3"}},"glProgramUniform4f");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLfloat * value"}},"glProgramUniform4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLdouble v0"},{"GLdouble v1"},{"GLdouble v2"},{"GLdouble v3"}},"glProgramUniform4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLdouble * value"}},"glProgramUniform4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLuint v0"},{"GLuint v1"},{"GLuint v2"},{"GLuint v3"}},"glProgramUniform4ui");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"const GLuint * value"}},"glProgramUniform4uiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix2x3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix3x2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix2x4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix4x2fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix3x4fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLfloat * value"}},"glProgramUniformMatrix4x3fv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix2x3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix3x2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix2x4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix4x2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix3x4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei count"},{"GLboolean transpose"},{"const GLdouble * value"}},"glProgramUniformMatrix4x3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint pipeline"}},"glValidateProgramPipeline");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint pipeline"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * infoLog"}},"glGetProgramPipelineInfoLog");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"}},"glVertexAttribL1d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"},{"GLdouble y"}},"glVertexAttribL2d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"}},"glVertexAttribL3d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble x"},{"GLdouble y"},{"GLdouble z"},{"GLdouble w"}},"glVertexAttribL4d");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttribL1dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttribL2dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttribL3dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLdouble * v"}},"glVertexAttribL4dv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint size"},{"GLenum type"},{"GLsizei stride"},{"const void * pointer"}},"glVertexAttribLPointer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLenum pname"},{"GLdouble * params"}},"glGetVertexAttribLdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLfloat * v"}},"glViewportArrayv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLfloat x"},{"GLfloat y"},{"GLfloat w"},{"GLfloat h"}},"glViewportIndexedf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLfloat * v"}},"glViewportIndexedfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLint * v"}},"glScissorArrayv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLint left"},{"GLint bottom"},{"GLsizei width"},{"GLsizei height"}},"glScissorIndexed");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"const GLint * v"}},"glScissorIndexedv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLdouble * v"}},"glDepthRangeArrayv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint index"},{"GLdouble n"},{"GLdouble f"}},"glDepthRangeIndexed");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLfloat * data"}},"glGetFloati_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint index"},{"GLdouble * data"}},"glGetDoublei_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLint first"},{"GLsizei count"},{"GLsizei instancecount"},{"GLuint baseinstance"}},"glDrawArraysInstancedBaseInstance");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLsizei count"},{"GLenum type"},{"const void * indices"},{"GLsizei instancecount"},{"GLuint baseinstance"}},"glDrawElementsInstancedBaseInstance");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLsizei count"},{"GLenum type"},{"const void * indices"},{"GLsizei instancecount"},{"GLint basevertex"},{"GLuint baseinstance"}},"glDrawElementsInstancedBaseVertexBaseInstance");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLenum pname"},{"GLsizei count"},{"GLint * params"}},"glGetInternalformativ");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint bufferIndex"},{"GLenum pname"},{"GLint * params"}},"glGetActiveAtomicCounterBufferiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint unit"},{"GLuint texture"},{"GLint level"},{"GLboolean layered"},{"GLint layer"},{"GLenum access"},{"GLenum format"}},"glBindImageTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbitfield barriers"}},"glMemoryBarrier");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei levels"},{"GLenum internalformat"},{"GLsizei width"}},"glTexStorage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei levels"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"}},"glTexStorage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei levels"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"}},"glTexStorage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLuint id"},{"GLsizei instancecount"}},"glDrawTransformFeedbackInstanced");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLuint id"},{"GLuint stream"},{"GLsizei instancecount"}},"glDrawTransformFeedbackStreamInstanced");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLenum format"},{"GLenum type"},{"const void * data"}},"glClearBufferData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLintptr offset"},{"GLsizeiptr size"},{"GLenum format"},{"GLenum type"},{"const void * data"}},"glClearBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint num_groups_x"},{"GLuint num_groups_y"},{"GLuint num_groups_z"}},"glDispatchCompute");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLintptr indirect"}},"glDispatchComputeIndirect");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint srcName"},{"GLenum srcTarget"},{"GLint srcLevel"},{"GLint srcX"},{"GLint srcY"},{"GLint srcZ"},{"GLuint dstName"},{"GLenum dstTarget"},{"GLint dstLevel"},{"GLint dstX"},{"GLint dstY"},{"GLint dstZ"},{"GLsizei srcWidth"},{"GLsizei srcHeight"},{"GLsizei srcDepth"}},"glCopyImageSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint param"}},"glFramebufferParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum pname"},{"GLint * params"}},"glGetFramebufferParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLenum pname"},{"GLsizei count"},{"GLint64 * params"}},"glGetInternalformati64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"}},"glInvalidateTexSubImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"}},"glInvalidateTexImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr length"}},"glInvalidateBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"}},"glInvalidateBufferData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei numAttachments"},{"const GLenum * attachments"}},"glInvalidateFramebuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei numAttachments"},{"const GLenum * attachments"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glInvalidateSubFramebuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"const void * indirect"},{"GLsizei drawcount"},{"GLsizei stride"}},"glMultiDrawArraysIndirect");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLenum type"},{"const void * indirect"},{"GLsizei drawcount"},{"GLsizei stride"}},"glMultiDrawElementsIndirect");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum programInterface"},{"GLenum pname"},{"GLint * params"}},"glGetProgramInterfaceiv");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum programInterface"},{"const GLchar * name"}},"glGetProgramResourceIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum programInterface"},{"GLuint index"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * name"}},"glGetProgramResourceName");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum programInterface"},{"GLuint index"},{"GLsizei propCount"},{"const GLenum * props"},{"GLsizei count"},{"GLsizei * length"},{"GLint * params"}},"glGetProgramResourceiv");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum programInterface"},{"const GLchar * name"}},"glGetProgramResourceLocation");
    result.emplace_back("GLint",std::vector<parameter_definition_t>{{"GLuint program"},{"GLenum programInterface"},{"const GLchar * name"}},"glGetProgramResourceLocationIndex");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLuint storageBlockIndex"},{"GLuint storageBlockBinding"}},"glShaderStorageBlockBinding");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum internalformat"},{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr size"}},"glTexBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLboolean fixedsamplelocations"}},"glTexStorage2DMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLboolean fixedsamplelocations"}},"glTexStorage3DMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum target"},{"GLuint origtexture"},{"GLenum internalformat"},{"GLuint minlevel"},{"GLuint numlevels"},{"GLuint minlayer"},{"GLuint numlayers"}},"glTextureView");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint bindingindex"},{"GLuint buffer"},{"GLintptr offset"},{"GLsizei stride"}},"glBindVertexBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint attribindex"},{"GLint size"},{"GLenum type"},{"GLboolean normalized"},{"GLuint relativeoffset"}},"glVertexAttribFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint attribindex"},{"GLint size"},{"GLenum type"},{"GLuint relativeoffset"}},"glVertexAttribIFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint attribindex"},{"GLint size"},{"GLenum type"},{"GLuint relativeoffset"}},"glVertexAttribLFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint attribindex"},{"GLuint bindingindex"}},"glVertexAttribBinding");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint bindingindex"},{"GLuint divisor"}},"glVertexBindingDivisor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum source"},{"GLenum type"},{"GLenum severity"},{"GLsizei count"},{"const GLuint * ids"},{"GLboolean enabled"}},"glDebugMessageControl");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum source"},{"GLenum type"},{"GLuint id"},{"GLenum severity"},{"GLsizei length"},{"const GLchar * buf"}},"glDebugMessageInsert");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLDEBUGPROC callback"},{"const void * userParam"}},"glDebugMessageCallback");
    result.emplace_back("GLuint",std::vector<parameter_definition_t>{{"GLuint count"},{"GLsizei bufSize"},{"GLenum * sources"},{"GLenum * types"},{"GLuint * ids"},{"GLenum * severities"},{"GLsizei * lengths"},{"GLchar * messageLog"}},"glGetDebugMessageLog");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum source"},{"GLuint id"},{"GLsizei length"},{"const GLchar * message"}},"glPushDebugGroup");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glPopDebugGroup");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum identifier"},{"GLuint name"},{"GLsizei length"},{"const GLchar * label"}},"glObjectLabel");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum identifier"},{"GLuint name"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * label"}},"glGetObjectLabel");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const void * ptr"},{"GLsizei length"},{"const GLchar * label"}},"glObjectPtrLabel");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"const void * ptr"},{"GLsizei bufSize"},{"GLsizei * length"},{"GLchar * label"}},"glGetObjectPtrLabel");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizeiptr size"},{"const void * data"},{"GLbitfield flags"}},"glBufferStorage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLenum format"},{"GLenum type"},{"const void * data"}},"glClearTexImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLenum format"},{"GLenum type"},{"const void * data"}},"glClearTexSubImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint first"},{"GLsizei count"},{"const GLuint * buffers"}},"glBindBuffersBase");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLuint first"},{"GLsizei count"},{"const GLuint * buffers"},{"const GLintptr * offsets"},{"const GLsizeiptr * sizes"}},"glBindBuffersRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLuint * textures"}},"glBindTextures");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLuint * samplers"}},"glBindSamplers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLuint * textures"}},"glBindImageTextures");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint first"},{"GLsizei count"},{"const GLuint * buffers"},{"const GLintptr * offsets"},{"const GLsizei * strides"}},"glBindVertexBuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum origin"},{"GLenum depth"}},"glClipControl");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * ids"}},"glCreateTransformFeedbacks");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint xfb"},{"GLuint index"},{"GLuint buffer"}},"glTransformFeedbackBufferBase");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint xfb"},{"GLuint index"},{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr size"}},"glTransformFeedbackBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint xfb"},{"GLenum pname"},{"GLint * param"}},"glGetTransformFeedbackiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint xfb"},{"GLenum pname"},{"GLuint index"},{"GLint * param"}},"glGetTransformFeedbacki_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint xfb"},{"GLenum pname"},{"GLuint index"},{"GLint64 * param"}},"glGetTransformFeedbacki64_v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * buffers"}},"glCreateBuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLsizeiptr size"},{"const void * data"},{"GLbitfield flags"}},"glNamedBufferStorage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLsizeiptr size"},{"const void * data"},{"GLenum usage"}},"glNamedBufferData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr size"},{"const void * data"}},"glNamedBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint readBuffer"},{"GLuint writeBuffer"},{"GLintptr readOffset"},{"GLintptr writeOffset"},{"GLsizeiptr size"}},"glCopyNamedBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLenum internalformat"},{"GLenum format"},{"GLenum type"},{"const void * data"}},"glClearNamedBufferData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLenum internalformat"},{"GLintptr offset"},{"GLsizeiptr size"},{"GLenum format"},{"GLenum type"},{"const void * data"}},"glClearNamedBufferSubData");
    result.emplace_back("void *",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLenum access"}},"glMapNamedBuffer");
    result.emplace_back("void *",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr length"},{"GLbitfield access"}},"glMapNamedBufferRange");
    result.emplace_back("GLboolean",std::vector<parameter_definition_t>{{"GLuint buffer"}},"glUnmapNamedBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr length"}},"glFlushMappedNamedBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLenum pname"},{"GLint * params"}},"glGetNamedBufferParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLenum pname"},{"GLint64 * params"}},"glGetNamedBufferParameteri64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLenum pname"},{"void ** params"}},"glGetNamedBufferPointerv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr size"},{"void * data"}},"glGetNamedBufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * framebuffers"}},"glCreateFramebuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum attachment"},{"GLenum renderbuffertarget"},{"GLuint renderbuffer"}},"glNamedFramebufferRenderbuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum pname"},{"GLint param"}},"glNamedFramebufferParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum attachment"},{"GLuint texture"},{"GLint level"}},"glNamedFramebufferTexture");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum attachment"},{"GLuint texture"},{"GLint level"},{"GLint layer"}},"glNamedFramebufferTextureLayer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum buf"}},"glNamedFramebufferDrawBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLsizei n"},{"const GLenum * bufs"}},"glNamedFramebufferDrawBuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum src"}},"glNamedFramebufferReadBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLsizei numAttachments"},{"const GLenum * attachments"}},"glInvalidateNamedFramebufferData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLsizei numAttachments"},{"const GLenum * attachments"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glInvalidateNamedFramebufferSubData");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum buffer"},{"GLint drawbuffer"},{"const GLint * value"}},"glClearNamedFramebufferiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum buffer"},{"GLint drawbuffer"},{"const GLuint * value"}},"glClearNamedFramebufferuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum buffer"},{"GLint drawbuffer"},{"const GLfloat * value"}},"glClearNamedFramebufferfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum buffer"},{"GLint drawbuffer"},{"GLfloat depth"},{"GLint stencil"}},"glClearNamedFramebufferfi");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint readFramebuffer"},{"GLuint drawFramebuffer"},{"GLint srcX0"},{"GLint srcY0"},{"GLint srcX1"},{"GLint srcY1"},{"GLint dstX0"},{"GLint dstY0"},{"GLint dstX1"},{"GLint dstY1"},{"GLbitfield mask"},{"GLenum filter"}},"glBlitNamedFramebuffer");
    result.emplace_back("GLenum",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum target"}},"glCheckNamedFramebufferStatus");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum pname"},{"GLint * param"}},"glGetNamedFramebufferParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint framebuffer"},{"GLenum attachment"},{"GLenum pname"},{"GLint * params"}},"glGetNamedFramebufferAttachmentParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * renderbuffers"}},"glCreateRenderbuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint renderbuffer"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"}},"glNamedRenderbufferStorage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint renderbuffer"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"}},"glNamedRenderbufferStorageMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint renderbuffer"},{"GLenum pname"},{"GLint * params"}},"glGetNamedRenderbufferParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei n"},{"GLuint * textures"}},"glCreateTextures");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum internalformat"},{"GLuint buffer"}},"glTextureBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum internalformat"},{"GLuint buffer"},{"GLintptr offset"},{"GLsizeiptr size"}},"glTextureBufferRange");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLsizei levels"},{"GLenum internalformat"},{"GLsizei width"}},"glTextureStorage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLsizei levels"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"}},"glTextureStorage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLsizei levels"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"}},"glTextureStorage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLboolean fixedsamplelocations"}},"glTextureStorage2DMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLsizei samples"},{"GLenum internalformat"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLboolean fixedsamplelocations"}},"glTextureStorage3DMultisample");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLsizei width"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTextureSubImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTextureSubImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLenum format"},{"GLenum type"},{"const void * pixels"}},"glTextureSubImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLsizei width"},{"GLenum format"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTextureSubImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTextureSubImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLenum format"},{"GLsizei imageSize"},{"const void * data"}},"glCompressedTextureSubImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint x"},{"GLint y"},{"GLsizei width"}},"glCopyTextureSubImage1D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glCopyTextureSubImage2D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"}},"glCopyTextureSubImage3D");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"GLfloat param"}},"glTextureParameterf");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"const GLfloat * param"}},"glTextureParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"GLint param"}},"glTextureParameteri");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"const GLint * params"}},"glTextureParameterIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"const GLuint * params"}},"glTextureParameterIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"const GLint * param"}},"glTextureParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"}},"glGenerateTextureMipmap");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint unit"},{"GLuint texture"}},"glBindTextureUnit");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * pixels"}},"glGetTextureImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLsizei bufSize"},{"void * pixels"}},"glGetCompressedTextureImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLenum pname"},{"GLfloat * params"}},"glGetTextureLevelParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLenum pname"},{"GLint * params"}},"glGetTextureLevelParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"GLfloat * params"}},"glGetTextureParameterfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"GLint * params"}},"glGetTextureParameterIiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"GLuint * params"}},"glGetTextureParameterIuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLenum pname"},{"GLint * params"}},"glGetTextureParameteriv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * arrays"}},"glCreateVertexArrays");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint index"}},"glDisableVertexArrayAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint index"}},"glEnableVertexArrayAttrib");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint buffer"}},"glVertexArrayElementBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint bindingindex"},{"GLuint buffer"},{"GLintptr offset"},{"GLsizei stride"}},"glVertexArrayVertexBuffer");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint first"},{"GLsizei count"},{"const GLuint * buffers"},{"const GLintptr * offsets"},{"const GLsizei * strides"}},"glVertexArrayVertexBuffers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint attribindex"},{"GLuint bindingindex"}},"glVertexArrayAttribBinding");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint attribindex"},{"GLint size"},{"GLenum type"},{"GLboolean normalized"},{"GLuint relativeoffset"}},"glVertexArrayAttribFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint attribindex"},{"GLint size"},{"GLenum type"},{"GLuint relativeoffset"}},"glVertexArrayAttribIFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint attribindex"},{"GLint size"},{"GLenum type"},{"GLuint relativeoffset"}},"glVertexArrayAttribLFormat");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint bindingindex"},{"GLuint divisor"}},"glVertexArrayBindingDivisor");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLenum pname"},{"GLint * param"}},"glGetVertexArrayiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint index"},{"GLenum pname"},{"GLint * param"}},"glGetVertexArrayIndexediv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint vaobj"},{"GLuint index"},{"GLenum pname"},{"GLint64 * param"}},"glGetVertexArrayIndexed64iv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * samplers"}},"glCreateSamplers");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei n"},{"GLuint * pipelines"}},"glCreateProgramPipelines");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLsizei n"},{"GLuint * ids"}},"glCreateQueries");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLuint buffer"},{"GLenum pname"},{"GLintptr offset"}},"glGetQueryBufferObjecti64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLuint buffer"},{"GLenum pname"},{"GLintptr offset"}},"glGetQueryBufferObjectiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLuint buffer"},{"GLenum pname"},{"GLintptr offset"}},"glGetQueryBufferObjectui64v");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint id"},{"GLuint buffer"},{"GLenum pname"},{"GLintptr offset"}},"glGetQueryBufferObjectuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLbitfield barriers"}},"glMemoryBarrierByRegion");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * pixels"}},"glGetTextureSubImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint texture"},{"GLint level"},{"GLint xoffset"},{"GLint yoffset"},{"GLint zoffset"},{"GLsizei width"},{"GLsizei height"},{"GLsizei depth"},{"GLsizei bufSize"},{"void * pixels"}},"glGetCompressedTextureSubImage");
    result.emplace_back("GLenum",std::vector<parameter_definition_t>{},"glGetGraphicsResetStatus");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint lod"},{"GLsizei bufSize"},{"void * pixels"}},"glGetnCompressedTexImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLint level"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * pixels"}},"glGetnTexImage");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei bufSize"},{"GLdouble * params"}},"glGetnUniformdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei bufSize"},{"GLfloat * params"}},"glGetnUniformfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei bufSize"},{"GLint * params"}},"glGetnUniformiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint program"},{"GLint location"},{"GLsizei bufSize"},{"GLuint * params"}},"glGetnUniformuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLint x"},{"GLint y"},{"GLsizei width"},{"GLsizei height"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * data"}},"glReadnPixels");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum query"},{"GLsizei bufSize"},{"GLdouble * v"}},"glGetnMapdv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum query"},{"GLsizei bufSize"},{"GLfloat * v"}},"glGetnMapfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum query"},{"GLsizei bufSize"},{"GLint * v"}},"glGetnMapiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLsizei bufSize"},{"GLfloat * values"}},"glGetnPixelMapfv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLsizei bufSize"},{"GLuint * values"}},"glGetnPixelMapuiv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum map"},{"GLsizei bufSize"},{"GLushort * values"}},"glGetnPixelMapusv");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLsizei bufSize"},{"GLubyte * pattern"}},"glGetnPolygonStipple");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * table"}},"glGetnColorTable");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * image"}},"glGetnConvolutionFilter");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLenum format"},{"GLenum type"},{"GLsizei rowBufSize"},{"void * row"},{"GLsizei columnBufSize"},{"void * column"},{"void * span"}},"glGetnSeparableFilter");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLboolean reset"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * values"}},"glGetnHistogram");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum target"},{"GLboolean reset"},{"GLenum format"},{"GLenum type"},{"GLsizei bufSize"},{"void * values"}},"glGetnMinmax");
    result.emplace_back("void",std::vector<parameter_definition_t>{},"glTextureBarrier");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLuint shader"},{"const GLchar * pEntryPoint"},{"GLuint numSpecializationConstants"},{"const GLuint * pConstantIndex"},{"const GLuint * pConstantValue"}},"glSpecializeShader");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"const void * indirect"},{"GLintptr drawcount"},{"GLsizei maxdrawcount"},{"GLsizei stride"}},"glMultiDrawArraysIndirectCount");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLenum mode"},{"GLenum type"},{"const void * indirect"},{"GLintptr drawcount"},{"GLsizei maxdrawcount"},{"GLsizei stride"}},"glMultiDrawElementsIndirectCount");
    result.emplace_back("void",std::vector<parameter_definition_t>{{"GLfloat factor"},{"GLfloat units"},{"GLfloat clamp"}},"glPolygonOffsetClamp");
    return result;
}();

#pragma GCC diagnostic pop