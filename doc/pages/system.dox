\page


The system module is not included in the glpp::core library and contains the window class. This class removes all the boilerplate code
to create a window with a OpenGl context. If you need a more fine grained controll over the context creation, i recommend to fall back
to GLFW or whatever library you want. You dont need to link against the system module in this case.

```c++
#include <glpp/system/window.hpp>

int main(int argc,	char **argv) {
	glpp::system::window_t window(800, 600, "example", glpp::system::window_t::vsync_t::off);
	window.enter_main_loop([&]() {
  	glpp::call(glClear, GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    // Whatever you want to render
  });
  return 0;
}
```

The ```window_t``` class comes with an ```input_handler_t``` attribute, which can be used to register callbacks to mouse and keyboard events. A reference to this attribute can be aquired with the ```input_handler()``` method. The input_handler can be set as a whole or single callbacks can be registered. Multithreading is not supported by the window class. Changes to the input_handler shall only be done from the main thread (thread that holds the window object) or from the inside of input callback functions.

```c++
#include <glpp/system/window.hpp>
#include <iostream>

int main(int argc, char **argv) {
	glpp::system::window_t window(800, 600, "example", glpp::system::window_t::vsync_t::off);
	window.input_handler().set_keyboard_action(key_t::escape, action_t::press, [&](int) {
		std::cout << "The escape key has been pressed." << std::endl;
		// Close App on Esc key press
		window.close();
	});

	window.input_handler().set_mouse_action(
		mouse_button_t::left, action_t::press,
		[&](double x, double y, int) {
			std::cout << "The left mouse button was clicked on pixel "
					  << x ", " << y << "." << std::endl;
		}
	);

	window.input_handler().set_mouse_action(
		mouse_button_t::left,
		action_t::release, [&](double x, double y, int) {
			std::cout << "The cursor moved to " << x ", " << y << "." << std::endl;
		}
	);

	return 0;
}
```